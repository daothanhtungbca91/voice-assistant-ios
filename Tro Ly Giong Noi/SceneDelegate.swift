//
//  SceneDelegate.swift
//  Demo GPT API
//
//  Created by Tung Dao Thanh on 13/6/25.
//

import UIKit
import AVFoundation

class SceneDelegate: UIResponder, UIWindowSceneDelegate {

    var window: UIWindow?
    private var pendingAction: (() -> Void)?
    private var wasBackground = false
    private var firstLaunch = true

    func scene(_ scene: UIScene,
               openURLContexts URLContexts: Set<UIOpenURLContext>) {
        guard let url = URLContexts.first?.url else { return }
        handleDeepLink(url)
        print("---SceneDelegate \(url)")
    }

    private func handleDeepLink(_ url: URL) {
        guard url.scheme == "blindchat" else { return }

        if url.host == "listen" {
            let action: () -> Void = {
                // ƒë√≥ng modal n·∫øu c√≥
                self.window?.rootViewController?.dismiss(animated: false, completion: {
                    // set l·∫°i root n·∫øu c·∫ßn
                    if let nav = self.window?.rootViewController as? UINavigationController {
                        nav.popToRootViewController(animated: false)
                    } else if !(self.window?.rootViewController is ViewController) {
                        let sb = UIStoryboard(name: "Main", bundle: nil)
                        let mainVC = sb.instantiateViewController(withIdentifier: "MAIN_VIEW") as! ViewController
                        let nav = UINavigationController(rootViewController: mainVC)
                        self.window?.rootViewController = nav
                        self.window?.makeKeyAndVisible()
                    }

                    // --- NEW: ƒë·∫£m b·∫£o audio session ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu TTS/Recording
                    self.resetAudioSession()
                    // Reset synthesizer ƒë·ªÉ clear previous state
                    VoiceManager.shared.resetSynthesizer()
                    VoiceManager.shared.stopAll()
                    VoiceManager.shared.isManuallyStopped = false

                    // nh·ªè delay ƒë·ªÉ AVAudioSession k·ªãp active ‚Üí gi√∫p ·ªïn ƒë·ªãnh khi g·ªçi TTS ngay l·∫≠p t·ª©c
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.25) {
                        VoiceManager.shared.startListening()
                    }
                })
            }

            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
               scene.activationState == .foregroundActive {
                action() // App ƒëang active ‚Üí ch·∫°y ngay
            } else {
                pendingAction = action // App ch∆∞a active ‚Üí ch·∫°y sau
            }
        }

//        if url.host == "listen" {
//            let action: () -> Void = {
//                // üîπ N·∫øu ƒëang c√≥ modal (v√≠ d·ª• CameraObjectSpeaker) ‚Üí ƒë√≥ng h·∫øt
//                self.window?.rootViewController?.dismiss(animated: false, completion: {
//                    if let nav = self.window?.rootViewController as? UINavigationController {
//                        // N·∫øu root l√† Navigation ‚Üí v·ªÅ Main
//                        nav.popToRootViewController(animated: false)
//                    } else if !(self.window?.rootViewController is ViewController) {
//                        // N·∫øu root kh√¥ng ph·∫£i l√† Main th√¨ √©p set l·∫°i
//                        let sb = UIStoryboard(name: "Main", bundle: nil)
//                        let mainVC = sb.instantiateViewController(withIdentifier: "MAIN_VIEW") as! ViewController
//                        let nav = UINavigationController(rootViewController: mainVC)
//                        self.window?.rootViewController = nav
//                        self.window?.makeKeyAndVisible()
//                    }
//
//                    // üîπ Reset state r·ªìi b·∫Øt ƒë·∫ßu nghe
//                    VoiceManager.shared.stopAll()
//                    VoiceManager.shared.startListening()
//                })
//            }
//
//            if let scene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
//               scene.activationState == .foregroundActive {
//                action() // üî• App ƒëang active ‚Üí ch·∫°y ngay
//            } else {
//                pendingAction = action // App ch∆∞a active ‚Üí ch·∫°y sau
//            }
//        }
    }

    func scene(_ scene: UIScene,
               willConnectTo session: UISceneSession,
               options connectionOptions: UIScene.ConnectionOptions) {
        print("scene")

        guard let _ = (scene as? UIWindowScene) else { return }
    }

    func sceneDidDisconnect(_ scene: UIScene) {
        print("---sceneDidDisconnect")

    }
    
    func sceneDidBecomeActive(_ scene: UIScene) {
        print("---sceneDidBecomeActive")
        
        //ngƒÉn m√†n h√¨nh kho√° c·∫£ app
        UIApplication.shared.isIdleTimerDisabled = true
        
        if let action = pendingAction {
            print("action = pendingAction")
            action()
            pendingAction = nil
            firstLaunch = false
            wasBackground = false
            return
        }

        // üîπ Lu√¥n ƒë∆∞a v·ªÅ MainViewController khi app tr·ªü l·∫°i foreground
        let sb = UIStoryboard(name: "Main", bundle: nil)
        let mainVC = sb.instantiateViewController(withIdentifier: "MAIN_VIEW") as! ViewController
        let nav = UINavigationController(rootViewController: mainVC)
        window?.rootViewController = nav
        window?.makeKeyAndVisible()

        // üîπ Reset audio session v√† kh·ªüi ƒë·ªông tr·ª£ l√Ω
        
        resetAudioSession()
        VoiceManager.shared.resetSynthesizer()
        VoiceManager.shared.stopAll()
        VoiceManager.shared.isManuallyStopped = false

        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            VoiceManager.shared.startListening()
        }

        // Reset flags
        firstLaunch = false
        wasBackground = false
    }


//    func sceneDidBecomeActive(_ scene: UIScene) {
//        print("---sceneDidBecomeActive")
//
//        if let action = pendingAction {
//            print("action = pendingAction")
//            action()
//            pendingAction = nil
//            firstLaunch = false
//            wasBackground = false
//            return
//        }
//
//        // üîπ Ch·ªâ reset audio session khi chu·∫©n b·ªã startListening
//        func resetAudioSession() {
//            let audioSession = AVAudioSession.sharedInstance()
//            do {
//                try audioSession.setCategory(.playback, mode: .spokenAudio, options: [.duckOthers])
//                try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
//            } catch {
//                print("‚ùå L·ªói reset audio session: \(error)")
//            }
//        }
//
//        if firstLaunch {
//            firstLaunch = false
//            resetAudioSession()
//            VoiceManager.shared.stopAll()
//            VoiceManager.shared.startListening()
//        } else if wasBackground {
//            wasBackground = false
//            resetAudioSession()
//            VoiceManager.shared.stopAll()
//            VoiceManager.shared.startListening()
//        } else {
//            print("‚ö†Ô∏è sceneDidBecomeActive nh∆∞ng kh√¥ng ph·∫£i firstLaunch hay background ‚Üí b·ªè qua")
//        }
//    }

    func sceneWillResignActive(_ scene: UIScene) {
        print("---sceneWillResignActive")

    }

    func sceneWillEnterForeground(_ scene: UIScene) {
//        VoiceManager.shared.stopAll()
//        VoiceManager.shared.startListening()
        print("---sceneWillEnterForeground")
    }

    func sceneDidEnterBackground(_ scene: UIScene) {
        // Reset state khi app ƒëi background
        print("---sceneDidEnterBackground")
        
        UIApplication.shared.isIdleTimerDisabled = false

        wasBackground = true
        VoiceManager.shared.stopAll()
        if let vc = window?.rootViewController as? ViewController {
            vc.stopAllTime()
        }

    }
    
    private func resetAudioSession() {
        let audioSession = AVAudioSession.sharedInstance()
        do {
            try audioSession.setCategory(.playback, mode: .spokenAudio, options: [.duckOthers])
            try audioSession.setActive(true, options: .notifyOthersOnDeactivation)
            print("‚úÖ audio session reset ok")
        } catch {
            print("‚ùå L·ªói reset audio session: \(error)")
        }
    }

}
